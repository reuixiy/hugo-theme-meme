// https://codyhouse.co/blog/post/how-to-combine-sass-color-functions-and-css-variables

@mixin defineColorHSL($color, $hue, $saturation, $lightness){
    #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");#{$color}-h: #{$hue};#{$color}-s: #{$saturation};#{$color}-l: #{$lightness};
}

:root {
    @include defineColorHSL(--color-primary, $primaryColorLightH, $primaryColorLightS, $primaryColorLightL);
    @include defineColorHSL(--color-bg, 0, 0%, 100%);
    @include defineColorHSL(--color-contrast-lower, 0, 0%, 95%);
    @include defineColorHSL(--color-contrast-low, 240, 1%, 83%);
    @include defineColorHSL(--color-contrast-medium, 240, 1%, 48%);
    @include defineColorHSL(--color-contrast-high, 240, 4%, 20%);
    @include defineColorHSL(--color-contrast-higher, 240, 8%, 12%);
}

// return css color variable with different opacity value
@function alpha($color, $opacity){
    $color: str-replace($color, 'var(');
    $color: str-replace($color, ')');
    $color-h: var(#{$color+'-h'});
    $color-s: var(#{$color+'-s'});
    $color-l: var(#{$color+'-l'});
    @return hsla($color-h, $color-s, $color-l, $opacity);
}
  
// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}